const toRemoves = [
  "parent",
  "opener",
  "top",
  "length",
  "frames",
  "closed",
  "location",
  "self",
  "window",
  "document",
  "name",
  "customElements",
  "history",
  "locationbar",
  "menubar",
  "personalbar",
  "scrollbars",
  "statusbar",
  "toolbar",
  "status",
  "frameElement",
  "navigator",
  "origin",
  "external",
  "screen",
  "innerWidth",
  "innerHeight",
  "scrollX",
  "pageXOffset",
  "scrollY",
  "pageYOffset",
  "visualViewport",
  "screenX",
  "screenY",
  "outerWidth",
  "outerHeight",
  "devicePixelRatio",
  "clientInformation",
  "screenLeft",
  "screenTop",
  "defaultStatus",
  "defaultstatus",
  "styleMedia",
  "onsearch",
  "isSecureContext",
  "onabort",
  "onblur",
  "oncancel",
  "oncanplay",
  "oncanplaythrough",
  "onchange",
  "onclick",
  "onclose",
  "oncontextmenu",
  "oncuechange",
  "ondblclick",
  "ondrag",
  "ondragend",
  "ondragenter",
  "ondragleave",
  "ondragover",
  "ondragstart",
  "ondrop",
  "ondurationchange",
  "onemptied",
  "onended",
  "onerror",
  "onfocus",
  "onformdata",
  "oninput",
  "oninvalid",
  "onkeydown",
  "onkeypress",
  "onkeyup",
  "onload",
  "onloadeddata",
  "onloadedmetadata",
  "onloadstart",
  "onmousedown",
  "onmouseenter",
  "onmouseleave",
  "onmousemove",
  "onmouseout",
  "onmouseover",
  "onmouseup",
  "onmousewheel",
  "onpause",
  "onplay",
  "onplaying",
  "onprogress",
  "onratechange",
  "onreset",
  "onresize",
  "onscroll",
  "onseeked",
  "onseeking",
  "onselect",
  "onstalled",
  "onsubmit",
  "onsuspend",
  "ontimeupdate",
  "ontoggle",
  "onvolumechange",
  "onwaiting",
  "onwebkitanimationend",
  "onwebkitanimationiteration",
  "onwebkitanimationstart",
  "onwebkittransitionend",
  "onwheel",
  "onauxclick",
  "ongotpointercapture",
  "onlostpointercapture",
  "onpointerdown",
  "onpointermove",
  "onpointerup",
  "onpointercancel",
  "onpointerover",
  "onpointerout",
  "onpointerenter",
  "onpointerleave",
  "onselectstart",
  "onselectionchange",
  "onanimationend",
  "onanimationiteration",
  "onanimationstart",
  "ontransitionend",
  "onafterprint",
  "onbeforeprint",
  "onbeforeunload",
  "onhashchange",
  "onlanguagechange",
  "onmessage",
  "onmessageerror",
  "onoffline",
  "ononline",
  "onpagehide",
  "onpageshow",
  "onpopstate",
  "onrejectionhandled",
  "onstorage",
  "onunhandledrejection",
  "onunload",
  "performance",
  "stop",
  "open",
  "alert",
  "confirm",
  "prompt",
  "print",
  "queueMicrotask",
  "requestAnimationFrame",
  "cancelAnimationFrame",
  "captureEvents",
  "releaseEvents",
  "requestIdleCallback",
  "cancelIdleCallback",
  "getComputedStyle",
  "matchMedia",
  "moveTo",
  "moveBy",
  "resizeTo",
  "resizeBy",
  "scroll",
  "scrollTo",
  "scrollBy",
  "getSelection",
  "find",
  "webkitRequestAnimationFrame",
  "webkitCancelAnimationFrame",
  "fetch",
  "btoa",
  "atob",
  "setTimeout",
  "clearTimeout",
  "setInterval",
  "clearInterval",
  "createImageBitmap",
  "close",
  "focus",
  "blur",
  "postMessage",
  "onappinstalled",
  "onbeforeinstallprompt",
  "crypto",
  "indexedDB",
  "webkitStorageInfo",
  "sessionStorage",
  "localStorage",
  "chrome",
  "onpointerrawupdate",
  "speechSynthesis",
  "webkitRequestFileSystem",
  "webkitResolveLocalFileSystemURL",
  "openDatabase",
  "applicationCache",
  "caches",
  "ondevicemotion",
  "ondeviceorientation",
  "ondeviceorientationabsolute",
  "counter",
  "__REACT_DEVTOOLS_COMPONENT_FILTERS__",
  "__REACT_DEVTOOLS_APPEND_COMPONENT_STACK__"
]

const findObjects = () => Object.keys(window).filter(x => !toRemoves.includes(x));

const typeSizes = {
  "undefined": () => 0,
  "boolean": () => 4,
  "number": () => 8,
  "string": item => 2 * item.length,
  "object": item => !item ? 0 : Object
    .keys(item)
    .reduce((total, key) => sizeOf(key) + sizeOf(item[key]) + total, 0)
};

const sizeOf = value => typeSizes[typeof value](value);

const sum = (arr) => arr.reduce((a,b) => {
  return a + b;
}, 0)

const mean = (arr) => {
  return arr.reduce((a, b) => a + b, 0) / arr.length;
}

const outlier_detection = (data = []) => {
  let sequence = data.map(d => d.heap)
  let sequence_mean = mean(sequence);
  let squares = sequence.map(d => Math.pow(d - sequence_mean, 2));
  let variance = sum(squares) / sequence.length;
  let standart_deviation = Math.sqrt(variance);
  let min = sequence_mean - state.sigma * standart_deviation;
  let max = sequence_mean + state.sigma * standart_deviation;

  return data.filter(x => x.heap > max || x.heap < min);
}