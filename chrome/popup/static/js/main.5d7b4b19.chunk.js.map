{"version":3,"sources":["stores/ControlStore.js","stores/index.js","actions/index.js","reducers/index.js","context/index.js","components/actionControl.js","App.js","serviceWorker.js","index.js"],"names":["control","active","stores","ControlStore","actions","START","STOP","Reducer","state","action","type","Context","React","createContext","Provider","Stores","Consumer","store","Reducers","reducer","useStyles","makeStyles","_theme","paper","padding","ActionControl","useContext","dispatch","classes","attachDebugger","tabs","a","chrome","runtime","sendMessage","payload","tabId","id","detachDebugger","stop","query","start","checkActivation","msg","useEffect","Paper","className","Box","display","justifyContent","Button","size","variant","onClick","App","Grid","container","spacing","item","xs","Boolean","window","location","hostname","match","Index","useReducer","value","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAIeA,EAJC,CACdC,QAAQ,GCKKC,EAJH,eACPC,GCEUC,EALC,CACdC,MAAO,QACPC,KAAM,QCkBOC,EAjBC,WAA6B,IAA5BC,EAA2B,uDAAnBN,EAAQO,EAAW,uCAC1C,OAAQA,EAAOC,MACb,KAAKN,EAAQC,MACX,OAAO,eACFG,EADL,CAEEP,QAAQ,IAEZ,KAAKG,EAAQE,KACX,OAAO,eACFE,EADL,CAEEP,QAAQ,IAEZ,QACE,OAAOO,ICZPG,EAAUC,IAAMC,gBAETC,EAAWH,EAAQG,SAEnBC,GADWJ,EAAQK,SACVC,GACTC,EAAWC,EAETR,ICLTS,EAAYC,aAAW,SAACC,GAAD,MAAa,CACxCC,MAAO,CACLC,QAAS,OAwDEC,EApDO,WAAO,IAAD,EACEC,qBAAWf,GAA/BM,EADkB,EAClBA,MAAOU,EADW,EACXA,SAETC,EAAUR,IAEVS,EAAc,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACfC,OAAOC,QAAQC,YAAY,CAAEzB,OAAQ,kBAAmB0B,QAAS,CAAEC,MAAON,EAAK,GAAGO,MADnE,OAErBV,EAAS,CAAEjB,KAAMN,EAAQC,QAFJ,2CAAH,sDAKdiC,EAAc,uCAAG,WAAOR,GAAP,SAAAC,EAAA,sEACfC,OAAOC,QAAQC,YAAY,CAAEzB,OAAQ,kBAAmB0B,QAAS,CAAEC,MAAON,EAAK,GAAGO,MADnE,OAErBV,EAAS,CAAEjB,KAAMN,EAAQE,OAFJ,2CAAH,sDAKdiC,EAAI,uCAAG,sBAAAR,EAAA,sEACLC,OAAOF,KAAKU,MAAM,CAAEvC,QAAQ,GAAQqC,GAD/B,2CAAH,qDAIJG,EAAK,uCAAG,sBAAAV,EAAA,sEACNC,OAAOF,KAAKU,MAAM,CAAEvC,QAAQ,GAAQ4B,GAD9B,2CAAH,qDAILa,EAAe,uCAAG,sBAAAX,EAAA,sDACtBC,OAAOC,QAAQC,YAAY,CAAEzB,OAAQ,yBAA0B,SAACkC,GAE5DhB,EADEgB,EACO,CAAEjC,KAAMN,EAAQC,OAEhB,CAAEK,KAAMN,EAAQE,UALP,2CAAH,qDAgBrB,OANAsC,qBAAU,WAENF,MAED,IAGD,kBAACG,EAAA,EAAD,CAAOC,UAAWlB,EAAQL,OACxB,kBAACwB,EAAA,EAAD,CAAKC,QAAQ,OAAOC,eAAe,YAE/BhC,EAAMhB,OACF,kBAACiD,EAAA,EAAD,CAAQC,KAAK,QAAQC,QAAQ,WAAWC,QAASd,GAAjD,QACA,kBAACW,EAAA,EAAD,CAAQC,KAAK,QAAQC,QAAQ,WAAWC,QAASZ,GAAjD,YC3CCa,MAVf,WACE,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,KACtB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAG,MACZ,kBAAC,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gBCVAC,EAAQ,WAAO,IAAD,EACQC,qBAAWhD,EAAUH,GAD7B,mBACXE,EADW,KACJU,EADI,KAGlB,OACE,kBAACb,EAAD,CAAUqD,MAAO,CAAElD,QAAOU,aACxB,kBAAC,EAAD,QAKNyC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5d7b4b19.chunk.js","sourcesContent":["const control = {\r\n  active: false\r\n}\r\n\r\nexport default control","import ControlStore from './ControlStore'\r\n\r\nconst stores = {\r\n  ...ControlStore\r\n}\r\n\r\nexport default stores","const actions = {\r\n  START: 'START',\r\n  STOP: 'STOP'\r\n}\r\n\r\nexport default actions","import stores from \"../stores\";\r\nimport actions from \"../actions\";\r\n\r\nconst Reducer = (state = stores, action) => {\r\n  switch (action.type) {\r\n    case actions.START:\r\n      return {\r\n        ...state,\r\n        active: true\r\n      }\r\n    case actions.STOP:\r\n      return {\r\n        ...state,\r\n        active: false\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default Reducer","import React from 'react'\r\nimport store from '../stores'\r\nimport reducer from '../reducers'\r\n\r\nconst Context = React.createContext()\r\n\r\nexport const Provider = Context.Provider\r\nexport const Consumer = Context.Consumer\r\nexport const Stores = store\r\nexport const Reducers = reducer\r\n\r\nexport default Context\r\n","/*eslint-disable no-undef*/\r\nimport React, { useEffect, useContext } from 'react'\r\nimport { Paper, Button, makeStyles, Box } from '@material-ui/core'\r\nimport Context from '../context'\r\nimport actions from '../actions'\r\n\r\nconst useStyles = makeStyles((_theme) => ({\r\n  paper: {\r\n    padding: 8\r\n  }\r\n}))\r\n\r\nconst ActionControl = () => {\r\n  const { store, dispatch } = useContext(Context)\r\n\r\n  const classes = useStyles()\r\n\r\n  const attachDebugger = async (tabs) => {\r\n    await chrome.runtime.sendMessage({ action: 'attach_debugger', payload: { tabId: tabs[0].id } })\r\n    dispatch({ type: actions.START })\r\n  }\r\n\r\n  const detachDebugger = async (tabs) => {\r\n    await chrome.runtime.sendMessage({ action: 'detach_debugger', payload: { tabId: tabs[0].id } })\r\n    dispatch({ type: actions.STOP })\r\n  }\r\n\r\n  const stop = async () => {\r\n    await chrome.tabs.query({ active: true }, detachDebugger)\r\n  }\r\n\r\n  const start = async () => {\r\n    await chrome.tabs.query({ active: true }, attachDebugger)\r\n  }\r\n\r\n  const checkActivation = async () => {\r\n    chrome.runtime.sendMessage({ action: 'is_attached_debugger' }, (msg) => {\r\n      if (msg) {\r\n        dispatch({ type: actions.START })\r\n      } else {\r\n        dispatch({ type: actions.STOP })\r\n      }\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (process.env.NODE_ENV === 'production') {\r\n      checkActivation()\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <Paper className={classes.paper}>\r\n      <Box display=\"flex\" justifyContent=\"flex-end\">\r\n        {\r\n          store.active\r\n            ? <Button size=\"small\" variant=\"outlined\" onClick={stop}>Stop</Button>\r\n            : <Button size=\"small\" variant=\"outlined\" onClick={start}>Start</Button>\r\n        }\r\n      </Box>\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default ActionControl\r\n/*eslint-enable no-undef*/","import React, {  } from 'react';\r\nimport { Grid } from '@material-ui/core'\r\nimport ActionControl from './components/actionControl';\r\n\r\nfunction App() {\r\n  return (\r\n    <Grid container spacing=\"1\">\r\n      <Grid item xs=\"12\">\r\n        <ActionControl />\r\n      </Grid>\r\n    </Grid>\r\n  );  \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useReducer } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'typeface-roboto';\r\nimport './index.css'\r\nimport { Provider, Reducers, Stores } from './context';\r\n\r\nconst Index = () => {\r\n  const [store, dispatch] = useReducer(Reducers, Stores)\r\n\r\n  return (\r\n    <Provider value={{ store, dispatch }}>\r\n      <App />\r\n    </Provider>\r\n  )\r\n}\r\n\r\nReactDOM.render(\r\n  <Index />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}